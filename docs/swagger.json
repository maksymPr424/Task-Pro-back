{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Task Pro",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "App to save and interactive with tasks"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://task-pro-back-kri0.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Tasks",
      "description": "Operations about tasks."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "User",
      "description": "Operations with user profile."
    },
    {
      "name": "Support",
      "description": "Support request via Email."
    }
  ],
  "paths": {
    "/columns": {
      "post": {
        "tags": [
          "Columns"
        ],
        "summary": "Create column",
        "operationId": "createStudent",
        "description": "Create a new column",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "Сolumn's name",
                    "type": "string",
                    "example": "To Do",
                    "minLength": 3,
                    "maxLength": 30
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a column",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "title"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a column!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/column"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/columns/{id}": {
      "delete": {
        "tags": [
          "Columns"
        ],
        "summary": "Delete column by id",
        "operationId": "deleteColumn",
        "description": "Delete column by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Column not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Column not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Columns"
        ],
        "summary": "Update column",
        "operationId": "updateColumn",
        "description": "Update a column by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the column to update",
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Сolumn's name",
                    "type": "string",
                    "example": "To Do",
                    "minLength": 3,
                    "maxLength": 30
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the column!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the column!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/column"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a new task",
        "operationId": "createTask",
        "description": "Creates a new task for the specified board and column.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "My task title",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "content": {
                    "type": "string",
                    "example": "Finish a project",
                    "minLength": 0,
                    "maxLength": 1024
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "none",
                      "low",
                      "medium",
                      "high"
                    ],
                    "example": "high"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-31T23:59:59Z"
                  },
                  "boardId": {
                    "type": "string",
                    "example": "64c5a4b2f2f9d20f8455b9b8"
                  },
                  "columnId": {
                    "type": "string",
                    "example": "64c5a4b2f2f9d20f8455b9c9"
                  }
                },
                "required": [
                  "title",
                  "boardId",
                  "columnId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "$ref": "#/components/schemas/task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401-2"
          },
          "404": {
            "$ref": "#/components/responses/404-2"
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task",
        "operationId": "updateTask",
        "description": "Updates a task's details by ID except for the boardId.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c8812y83845"
            },
            "description": "The ID of the task to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Update task title",
                    "minLength": 1,
                    "maxLength": 150
                  },
                  "content": {
                    "type": "string",
                    "example": "Updated task content",
                    "minLength": 0,
                    "maxLength": 1024
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "none",
                      "low",
                      "medium",
                      "high"
                    ],
                    "example": "medium"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-31T23:59:59Z"
                  },
                  "columnId": {
                    "type": "string",
                    "description": "ID of the column to which the task will be moved.",
                    "example": "64c5a4b2f2f9d20f8455b9c9"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updatedTask": {
                      "$ref": "#/components/schemas/task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Modifying boardId is not allowed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a task",
        "description": "Deletes a specific task by its ID.",
        "operationId": "deleteTask",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598284"
            },
            "description": "The ID of the task to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign in!",
        "operationId": "loggedInUser",
        "description": "Sign in",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "john@gmail.com",
                    "format": "email"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345",
                    "minLength": 8,
                    "maxLength": 64
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "john@gmail.com"
                    },
                    "theme": {
                      "type": "string",
                      "example": "light"
                    },
                    "photoUrl": {
                      "type": "string",
                      "example": null
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "vYHgvRmm43zhiShyJaKdNwH2P5kX216DtRgjjN08"
                    },
                    "boardsData": {
                      "type": "object",
                      "properties": {
                        "lastActiveBoard": {
                          "type": "string",
                          "example": null
                        },
                        "boards": {
                          "type": "array",
                          "example": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out of the user",
        "operationId": "logOutUser",
        "description": "Log out",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out the user"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Update accessToken with refreshToken",
        "operationId": "updateAccessToken",
        "description": "Refresh access token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "john@gmail.com"
                    },
                    "theme": {
                      "type": "string",
                      "example": "light"
                    },
                    "photoUrl": {
                      "type": "string",
                      "example": null
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign up!",
        "operationId": "registerUser",
        "description": "Sign up",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe",
                    "minLength": 2,
                    "maxLength": 32
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "john@gmail.com",
                    "format": "email"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345678",
                    "minLength": 8,
                    "maxLength": 64
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "john@gmail.com"
                    },
                    "theme": {
                      "type": "string",
                      "example": "light"
                    },
                    "photoUrl": {
                      "type": "string",
                      "example": null
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "X679Yubmjdhkwhfk0bY7XpwnOL+enp+yJfXTyBYvUETb"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict error due to email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "ConflictError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email in use"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get information about the current user",
        "operationId": "getCurrentUser",
        "description": "Retrieve information about the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email of the user"
                    },
                    "theme": {
                      "type": "string",
                      "example": "light"
                    },
                    "photoUrl": {
                      "type": "string",
                      "example": null
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "vYHgvRmm43zhiShyJaKdNwH2P5kX216DtRgjjN08"
                    },
                    "boardsData": {
                      "type": "object",
                      "properties": {
                        "lastActiveBoard": {
                          "type": "string",
                          "example": null
                        },
                        "boards": {
                          "type": "array",
                          "example": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user profile",
        "operationId": "updateUser",
        "description": "Update a user profile from the provided data",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photoUrl": {
                    "description": "User's photo. Formats accepted are .jpg, jpeg, png, gif",
                    "type": "string",
                    "format": "binary"
                  },
                  "theme": {
                    "description": "Specifies the user's app theme. Possible values are 'light', 'dark', or 'violet'.",
                    "type": "string",
                    "enum": [
                      "light",
                      "dark",
                      "violet"
                    ],
                    "example": "light"
                  },
                  "name": {
                    "description": "User's name. It may contain Latin letters, numbers, and special characters. The minimum length is 2 and the maximum length is 32 characters.",
                    "type": "string",
                    "example": "Elon"
                  },
                  "email": {
                    "description": "User's email. It may contain Latin letters, numbers, and special characters. The minimum length is 6 and the maximum length is 32 characters.",
                    "type": "string",
                    "example": "user@gmail.com"
                  },
                  "password": {
                    "description": "User's password. It may contain Latin letters, numbers, and special characters. The minimum length is 8 and the maximum length is 64 characters.",
                    "type": "string",
                    "example": "jnk23!j424l"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates a user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userUpdateResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404-2-2"
          }
        }
      }
    },
    "/support": {
      "post": {
        "tags": [
          "Support"
        ],
        "summary": "Support request",
        "operationId": "sendEmail",
        "description": "Support request via Email",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userEmail",
                  "comment"
                ],
                "properties": {
                  "userEmail": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 254,
                    "example": "user@gmail.com",
                    "description": "Email address of the user making the support request."
                  },
                  "comment": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 500,
                    "example": "I need help...",
                    "description": "The message or comment detailing the support request."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Support request sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Support request sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-2"
          },
          "404": {
            "$ref": "#/components/responses/404-3"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "column": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "userId",
          "boardId"
        ],
        "properties": {
          "_id": {
            "description": "Contact's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "title": {
            "description": "Сolumn's name",
            "type": "string",
            "example": "To Do",
            "minLength": 3,
            "maxLength": 30
          },
          "userId": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "boardId": {
            "description": "Board's id",
            "type": "string",
            "example": "65ca67e7ae7f10c88b598384"
          }
        }
      },
      "task": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the task.",
            "example": "64c5a4b2f2f9d20f8455b9c2"
          },
          "title": {
            "type": "string",
            "description": "Title of the task.",
            "example": "Implement user authentication",
            "minLength": 1,
            "maxLength": 150
          },
          "content": {
            "type": "string",
            "description": "Additional details or content of the task.",
            "example": "Create login and signup endpoints with JWT",
            "minLength": 0,
            "maxLength": 1024
          },
          "priority": {
            "type": "string",
            "description": "Priority level of the task.",
            "enum": [
              "none",
              "low",
              "medium",
              "high"
            ],
            "default": "none",
            "example": "high"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "Deadline for completing the task.",
            "example": "2024-12-31T23:59:59Z"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who created the task.",
            "example": "64c5a4b2f2f9d20f8455b9b5"
          },
          "boardId": {
            "type": "string",
            "description": "ID of the board this task is associated with.",
            "example": "64c5a4b2f2f9d20f8455b9b8"
          },
          "columnId": {
            "type": "string",
            "description": "ID of the column within the board that contains this task.",
            "example": "64c5a4b2f2f9d20f8455b9c9"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the task was created.",
            "example": "2024-11-01T12:34:56Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the last update to the task.",
            "example": "2024-11-03T15:30:25Z"
          }
        },
        "required": [
          "title",
          "userId",
          "boardId",
          "columnId"
        ]
      },
      "userUpdateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "Elon"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "user@gmail.com"
          },
          "theme": {
            "description": "Specifies the app theme for the user",
            "type": "string",
            "enum": [
              "light",
              "dark",
              "violet"
            ],
            "example": "light"
          },
          "lastActiveBoard": {
            "description": "ID of the user's last active board or null if none",
            "oneOf": [
              {
                "type": "string",
                "example": "672390d93b65a0820f59ef63"
              },
              {
                "type": "null"
              }
            ]
          },
          "photoUrl": {
            "description": "Link to user's photo. This field may be null if the user has not uploaded a photo.",
            "oneOf": [
              {
                "type": "string",
                "example": "https://res.cloudinary.com/uqwgwf/image/upload/image.png"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request – Invalid input for creating a task.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Board ID and Column ID are required"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Session is not found"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NotFound error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-2": {
        "description": "Unauthorized – User authentication failed.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized access. Please log in."
                }
              }
            }
          }
        }
      },
      "404-2": {
        "description": "Not Found – The specified task could not be found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Task not found"
                }
              }
            }
          }
        }
      },
      "404-2-2": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "400-2": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid email address or comment length"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404-3": {
        "description": "Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "The email address provided does not exist in our records."
                }
              }
            }
          }
        }
      }
    }
  }
}